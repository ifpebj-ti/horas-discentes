name: CI/CD Workflow

on:
  pull_request:
    types: [closed]
    branches: [ "main" ]

jobs:
  prepare-tag:
    name: üè∑Ô∏è Preparar nova tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.new_tag }}
      tipo:    ${{ steps.tipo.outputs.tipo }}

    steps:
      - name:  checkout
        uses: actions/checkout@v4

      - name: Extrair tipo de mudan√ßa da PR
        id: tipo
        run: |
          # Salva o corpo do PR em um arquivo para an√°lise
          echo "${{ github.event.pull_request.body }}" > body.txt
      
          tipo=""
          if grep -q "\[x\] marco-no-projeto" body.txt; then
            tipo="marco-no-projeto"
          elif grep -q "\[x\] nova-feature" body.txt; then
            tipo="nova-feature"
          elif grep -q "\[x\] bug-fix" body.txt; then
            tipo="bug-fix"
          else
            # Falha o job se nenhum tipo for selecionado, evitando releases acidentais
            echo "Erro: Nenhum tipo de mudan√ßa foi selecionado no template do Pull Request."
            exit 1
          fi
          
          echo "tipo=$tipo" >> "$GITHUB_OUTPUT"

      - name: Obter a √∫ltima tag da release
        id: ultima
        run: |
          # Busca a √∫ltima tag de release. Se nenhuma existir, come√ßa com 0.0.0
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Tag atual: $tag"
          echo "tag_atual=$tag" >> "$GITHUB_OUTPUT"

      - name: Calcular nova tag (SemVer)
        id: nova_tag
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.ultima.outputs.tag_atual }}"
          case "${{ steps.tipo.outputs.tipo }}" in
            bug-fix)           patch=$((patch + 1));;
            nova-feature)      minor=$((minor + 1)); patch=0;;
            marco-no-projeto)  major=$((major + 1)); minor=0; patch=0;;
          esac
          nova_tag="${major}.${minor}.${patch}"
          echo "Nova tag calculada: $nova_tag"
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"

  frontend:
    name: üèóÔ∏è Frontend CI/CD
    needs: prepare-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: front
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front/ 
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:latest


  backend:
    name: üèóÔ∏è Backend CI/CD
    needs: prepare-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Back/Dockerfile 
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:latest
  
  create-release:
    name: üöÄ Criar Release
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-tag.outputs.new_tag }}
          generate_release_notes: true
name: Automatic Release CI/CD

on:
  pull_request:
    types: [closed]
    branches: ["main"]

permissions:
  contents: write
  packages: write

jobs:
  prepare-tag:
    name: üè∑Ô∏è Preparar nova tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.nova_tag }}
      tipo:    ${{ steps.tipo.outputs.tipo }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: tipo
        name: Extrair tipo de mudan√ßa da PR
        run: |
          echo "${{ github.event.pull_request.body }}" > body.txt
          tipo=""
          if grep -q "\[x\] marco-no-projeto" body.txt; then
            tipo="marco-no-projeto"
          elif grep -q "\[x\] nova-feature" body.txt; then
            tipo="nova-feature"
          elif grep -q "\[x\] bug-fix" body.txt; then
            tipo="bug-fix"
          else
            echo "Erro: Nenhum tipo de mudan√ßa foi selecionado no template do Pull Request."
            exit 1
          fi
          echo "tipo=$tipo" >> "$GITHUB_OUTPUT"

      - id: ultima
        name: Obter a √∫ltima tag da release
        run: |
          tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          echo "tag_atual=$tag" >> "$GITHUB_OUTPUT"

      - id: nova_tag
        name: Calcular nova tag (SemVer)
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.ultima.outputs.tag_atual }}"
          case "${{ steps.tipo.outputs.tipo }}" in
            bug-fix)           patch=$((patch + 1));;
            nova-feature)      minor=$((minor + 1)); patch=0;;
            marco-no-projeto)  major=$((major + 1)); minor=0; patch=0;;
          esac
          nova_tag="${major}.${minor}.${patch}"
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"

  frontend:
    name: üèóÔ∏è Frontend CI/CD
    needs: prepare-tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:latest

  backend:
    name: üèóÔ∏è Backend CI/CD
    needs: prepare-tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore Back/Back.csproj

      - name: Docker login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Back/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:latest

  create-release:
    name: üöÄ Criar Release
    needs: [frontend, backend]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ needs.prepare-tag.outputs.new_tag }}
      TIPO:    ${{ needs.prepare-tag.outputs.tipo }}
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Publicar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          body: |
            Release gerada automaticamente a partir da Pull Request #${{ github.event.pull_request.number }}
            Tipo de mudan√ßa: ${{ env.TIPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
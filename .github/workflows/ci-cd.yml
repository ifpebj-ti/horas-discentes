name: Automatic Release CI/CD

on:
  pull_request:
    types: [closed]
    branches: ["main"]

permissions:
  contents: write
  packages: write

jobs:
  tag-creation:
    name: üè∑Ô∏è Preparar nova tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.new_tag }}
      tipo: ${{ steps.tipo.outputs.tipo }}
    steps:
      - uses: actions/checkout@v4
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
      - name: Extrair tipo de mudan√ßa da PR
        id: tipo
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "$PR_BODY" > body.txt
          tipo_encontrado=""
          if grep -q "^\s*-\s*\[x\]\s*novo-marco" body.txt; then
            tipo_encontrado="novo-marco"
          elif grep -q "^\s*-\s*\[x\]\s*nova-feature-refactor" body.txt; then
            tipo_encontrado="nova-feature-refactor"
          elif grep -q "^\s*-\s*\[x\]\s*bug-fix" body.txt; then
            tipo_encontrado="bug-fix"
          elif grep -q "^\s*-\s*\[x\]\s*outros" body.txt; then
            tipo_encontrado="outros"
          fi
          if [ -z "$tipo_encontrado" ]; then
            echo "tipo=default-patch" >> "$GITHUB_OUTPUT"
          else
            echo "tipo=$tipo_encontrado" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
      - name: Obter a √∫ltima tag da release
        id: ultima
        run: |
          gh auth setup-git
          tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [[ -z "$tag" ]]; then tag="0.0.0"; fi
          echo "last_tag=$tag" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Calcular nova tag (SemVer)
        id: nova_tag
        run: |
          tag_atual="${{ steps.ultima.outputs.tag_atual }}"
          tipo="${{ steps.tipo.outputs.tipo }}"
          tag_limpa=$(echo "$tag_atual" | sed 's/^v//')
          IFS='.' read -r major minor patch <<< "$tag_limpa"
          case "$tipo" in
            bug-fix) patch=$((patch + 1));;
            nova-feature-refactor) minor=$((minor + 1)); patch=0;;
            novo-marco) major=$((major + 1)); minor=0; patch=0;;
            default-patch) patch=$((patch + 1));;
            *) patch=$((patch + 1));;
          esac
          nova_tag_calculada="${major}.${minor}.${patch}"
          nova_tag="v${nova_tag_calculada}"
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"

  backend:
    name: üèóÔ∏è Backend CI/CD
    needs: tag-creation
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push Backend Docker image
        run: |
          /usr/bin/docker buildx build --file Back/Dockerfile --push \
          -t ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:${{ needs.tag-creation.outputs.new_tag }} \
          -t ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:latest ./Back
  frontend:
    name: üèóÔ∏è Frontend CI/CD
    needs: tag-creation
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:${{ needs.tag-creation.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:latest

  create-release:
    name: üöÄ Criar Release
    needs: [frontend, backend]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ needs.tag-creation.outputs.new_tag }}
      TIPO:    ${{ needs.tag-creation.outputs.tipo }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Publicar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          body: |
            Release gerada automaticamente a partir da Pull Request #${{ github.event.pull_request.number }}
            Tipo de mudan√ßa: ${{ env.TIPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
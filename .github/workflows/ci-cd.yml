# .github/workflows/ci-cd.yml

name: Automatic Release CI/CD

on:
  pull_request:
    types: [closed]
    branches: ["main"]

permissions:
  contents: write
  packages: write

jobs:
  tag-creation:
    name: üè∑Ô∏è Preparar nova tag
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.nova_tag }}
      tipo: ${{ steps.tipo.outputs.tipo }}

    steps:
      - uses: actions/checkout@v4
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Extrair tipo de mudan√ßa da PR
        id: tipo
        run: |
          echo "${{ github.event.pull_request.body }}" > body.txt
          
          tipo_encontrado=""
          if grep -q "^\s*-\s*\[x\]\s*novo-marco" body.txt; then
            tipo_encontrado="novo-marco"
          elif grep -q "^\s*-\s*\[x\]\s*nova-feature" body.txt; then
            tipo_encontrado="nova-feature"
          elif grep -q "^\s*-\s*\[x\]\s*nova-feature-refactor" body.txt; then
            tipo_encontrado="nova-feature-refactor"
          elif grep -q "^\s*-\s*\[x\]\s*bug-fix" body.txt; then
            tipo_encontrado="bug-fix"
          elif grep -q "^\s*-\s*\[x\]\s*outros" body.txt; then
            tipo_encontrado="outros"
          fi

          if [ -z "$tipo_encontrado" ]; then
            echo "tipo=default-patch" >> "$GITHUB_OUTPUT"
          else
            echo "tipo=$tipo_encontrado" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Obter a √∫ltima tag da release
        id: ultima
        run: |
          tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
          echo "last_tag=$tag" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Calcular nova tag (SemVer)
        id: nova_tag
        run: |
          tag_atual="${{ steps.ultima.outputs.last_tag }}"
          tipo="${{ steps.tipo.outputs.tipo }}"
          
          if [ -z "$tag_atual" ]; then
            tag_atual="v0.0.0"
          fi

          tag_limpa=$(echo "$tag_atual" | sed 's/^v//')
          IFS='.' read -r major minor patch <<< "$tag_limpa"

          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          case "$tipo" in
            bug-fix) patch=$((patch + 1));;
            nova-feature) minor=$((minor + 1)); patch=0;;
            nova-feature-refactor) minor=$((minor + 1)); patch=0;;
            novo-marco) major=$((major + 1)); minor=0; patch=0;;
            default-patch) patch=$((patch + 1));;
            outros) patch=$((patch + 1));;
            *) patch=$((patch + 1));;
          esac

          nova_tag_calculada="${major}.${minor}.${patch}"
          nova_tag="v${nova_tag_calculada}"
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"

  backend:
    name: üèóÔ∏è Backend CI/CD
    needs: tag-creation
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install SonarScanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.14.0

      - name: Run SonarScanner for Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd ./Back
          dotnet sonarscanner begin /k:"horas-discentes-backend" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Back
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:${{ needs.tag-creation.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:latest

  frontend:
    name: üèóÔ∏è Frontend CI/CD
    needs: tag-creation
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      - name: Install Dependencies and SonarScanner
        run: |
          cd ./front
          npm install

      - name: Run Jest Tests and Generate Coverage Report
        run: |
          cd ./front
          npm test -- --coverage --coverageReporters=lcov --coverageDirectory=coverage

      - name: Run SonarScanner for Frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd ./front
          npm install sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=horas-discentes-frontend \
            -Dsonar.sources=. \
            -Dsonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
            -Dsonar.token="${{ secrets.SONAR_TOKEN }}" \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:${{ needs.tag-creation.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:latest

  create-release:
    name: üöÄ Criar Release
    needs: [tag-creation, frontend, backend]
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ needs.tag-creation.outputs.new_tag }}
      TIPO: ¬† ¬†${{ needs.tag-creation.outputs.tipo }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Publicar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          body: |
            Release gerada automaticamente a partir da Pull Request #${{ github.event.pull_request.number }}
            Tipo de mudan√ßa: ${{ env.TIPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
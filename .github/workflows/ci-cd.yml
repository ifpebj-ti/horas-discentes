name: Automatic Release CI/CD

on:
  pull_request:
    types: [closed]
    branches: ["main"]

permissions:
  contents: write
  packages: write 

jobs:
  prepare-tag:
    name: üè∑Ô∏è Preparar nova tag
    if: github.event.pull_request.merged == true 
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.nova_tag.outputs.nova_tag }}
      tipo:    ${{ steps.tipo.outputs.tipo }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - id: tipo
        name: Extrair tipo de mudan√ßa da PR
        run: |
          echo "Conte√∫do do corpo do PR:"
          echo "${{ github.event.pull_request.body }}" # Exibe o corpo do PR para depura√ß√£o

          PR_BODY="${{ github.event.pull_request.body }}"
          echo "$PR_BODY" > pr_body.txt # Salva o corpo do PR em um arquivo para grep
          
          tipo_encontrado=""
          # Ajuste nas regex para serem mais robustas com espa√ßos e tra√ßos
          if grep -q "^\s*-\s*\[x\]\s*marco-no-projeto" pr_body.txt; then
            tipo_encontrado="marco-no-projeto"
          elif grep -q "^\s*-\s*\[x\]\s*nova-feature" pr_body.txt; then
            tipo_encontrado="nova-feature"
          elif grep -q "^\s*-\s*\[x\]\s*bug-fix" pr_body.txt; then
            tipo_encontrado="bug-fix"
          fi

          if [ -z "$tipo_encontrado" ]; then # Se nenhum tipo for encontrado
            echo "Erro: Nenhum tipo de mudan√ßa foi selecionado no template do Pull Request."
            echo "tipo=default-patch" >> "$GITHUB_OUTPUT" # Define um tipo padr√£o para n√£o quebrar o pipeline
          else
            echo "Tipo de mudan√ßa detectado: $tipo_encontrado"
            echo "tipo=$tipo_encontrado" >> "$GITHUB_OUTPUT"
          fi
        shell: bash 

      - id: ultima
        name: Obter a √∫ltima tag da release
        run: |
          # Obt√©m a √∫ltima tag SemVer ou "0.0.0" se n√£o houver tags
          tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "0.0.0")
          echo "tag_atual=$tag" >> "$GITHUB_OUTPUT"
          echo "√öltima tag encontrada: $tag"

      - id: nova_tag
        name: Calcular nova tag (SemVer)
        run: |
          tag_atual="${{ steps.ultima.outputs.tag_atual }}"
          tipo="${{ steps.tipo.outputs.tipo }}" # Pega o tipo do step anterior

          # Remove o 'v' inicial se existir, para manipular apenas os n√∫meros
          tag_limpa=$(echo "$tag_atual" | sed 's/^v//')
          
          IFS='.' read -r major minor patch <<< "$tag_limpa"
          
          echo "Calculando nova tag com tag_atual: $tag_atual (limpa: $tag_limpa) e tipo: $tipo"

          case "$tipo" in
            bug-fix)           patch=$((patch + 1));;
            nova-feature)      minor=$((minor + 1)); patch=0;;
            marco-no-projeto)  major=$((major + 1)); minor=0; patch=0;;
            default-patch)     patch=$((patch + 1));; # Caso o tipo n√£o seja encontrado, incrementa patch
            *)                 echo "Aviso: Tipo de mudan√ßa desconhecido. Incrementando patch por padr√£o."; patch=$((patch + 1));;
          esac
          
          nova_tag_calculada="${major}.${minor}.${patch}"
          
          # Prefixe com 'v' para a tag final
          nova_tag="v${nova_tag_calculada}"
          
          echo "nova_tag=$nova_tag" >> "$GITHUB_OUTPUT"
          echo "Nova tag calculada: $nova_tag"

  frontend:
    name: üèóÔ∏è Frontend CI/CD
    needs: prepare-tag 
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front # Contexto de build para o frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-frontend:latest

  backend:
    name: üèóÔ∏è Backend CI/CD
    needs: prepare-tag 
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4 
        with:
          dotnet-version: '8.0.x'

      - name: Docker Login
        uses: docker/login-action@v3 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Back 
          file: Dockerfile 
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:${{ needs.prepare-tag.outputs.new_tag }}
            ghcr.io/${{ github.repository_owner }}/horas-discentes-backend:latest

  create-release:
    name: üöÄ Criar Release
    needs: [frontend, backend] 
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NEW_TAG: ${{ needs.prepare-tag.outputs.new_tag }}
      TIPO:    ${{ needs.prepare-tag.outputs.tipo }}
    permissions:
      contents: write # Necess√°rio para criar a release e a tag Git

    steps:
      - uses: actions/checkout@v4

      - name: Debug - Verificar tag recebida
        run: |
          echo "Tag recebida no job 'create-release' (env.NEW_TAG): ${{ env.NEW_TAG }}"
          echo "Tag recebida no job 'create-release' (needs.prepare-tag.outputs.new_tag): ${{ needs.prepare-tag.outputs.new_tag }}"

      - name: Publicar release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }} # Usa a tag calculada
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          body: |
            Release gerada automaticamente a partir da Pull Request #${{ github.event.pull_request.number }}
            Tipo de mudan√ßa: ${{ env.TIPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 